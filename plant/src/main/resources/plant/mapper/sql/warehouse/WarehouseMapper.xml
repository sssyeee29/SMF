<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="plant.dev.warehouse.mapper.WarehouseMapper">

    <!-- 목록 조회 -->
    <select id="findItems" parameterType="map"
            resultType="plant.dev.warehouse.dto.InventoryItemDto">
        SELECT
        item_id          AS id,
        item_name        AS name,
        item_code        AS code,
        quantity,
        location,
        in_date          AS inDate,
        out_date         AS outDate,
        note,
        category,
        product_type     AS productType,
        delivery_status  AS status,
        limit_qty        AS `limit`
        FROM inventory_tbl
        WHERE 1=1
        <if test="search != null and search != ''">
            AND (item_name LIKE CONCAT('%', #{search}, '%')
            OR item_code LIKE CONCAT('%', #{search}, '%'))
        </if>
        <if test="productType != null and productType != ''">
            AND product_type = #{productType}
        </if>
        <if test="category != null and category != ''">
            AND category = #{category}
        </if>
        <if test="status != null and status != ''">
            AND delivery_status = #{status}
        </if>
        <if test="from != null and to != null">
            AND in_date BETWEEN #{from} AND #{to}
        </if>
        <if test="from == null and to == null and regDays != null">
            AND in_date BETWEEN DATE_SUB(CURDATE(), INTERVAL #{regDays} DAY) AND CURDATE()
        </if>
        ORDER BY item_id DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 총 개수 -->
    <select id="countItems" parameterType="map" resultType="int">
        SELECT COUNT(1)
        FROM inventory_tbl
        WHERE 1=1
        <if test="search != null and search != ''">
            AND (item_name LIKE CONCAT('%', #{search}, '%')
            OR item_code LIKE CONCAT('%', #{search}, '%'))
        </if>
        <if test="productType != null and productType != ''">
            AND product_type = #{productType}
        </if>
        <if test="category != null and category != ''">
            AND category = #{category}
        </if>
        <if test="status != null and status != ''">
            AND delivery_status = #{status}
        </if>
        <if test="from != null and to != null">
            AND in_date BETWEEN #{from} AND #{to}
        </if>
        <if test="from == null and to == null and regDays != null">
            AND in_date BETWEEN DATE_SUB(CURDATE(), INTERVAL #{regDays} DAY) AND CURDATE()
        </if>
    </select>

    <!-- 단건 조회 -->
    <select id="findById" parameterType="long"
            resultType="plant.dev.warehouse.dto.InventoryItemDto">
        SELECT
            item_id          AS id,
            item_name        AS name,
            item_code        AS code,
            quantity,
            location,
            in_date          AS inDate,
            out_date         AS outDate,
            note,
            category,
            product_type     AS productType,
            delivery_status  AS status,
            limit_qty        AS `limit`
        FROM inventory_tbl
        WHERE item_id = #{id}
    </select>

    <!-- 납품 업데이트: qty/status/outDate -->
    <!-- params: id, qty, status, outDate -->
    <update id="updateDelivery" parameterType="map">
        UPDATE inventory_tbl
        SET
            quantity         = #{qty},
            delivery_status  = #{status},
            out_date         = #{outDate}
        WHERE item_id = #{id}
    </update>

    <!-- 한도 변경 -->
    <!-- params: id, limit -->
    <update id="updateLimit" parameterType="map">
        UPDATE inventory_tbl
        SET limit_qty = #{limit}
        WHERE item_id = #{id}
    </update>

    <!-- 신규 INSERT (자동 분할 생성에서 사용) -->
    <insert id="insertItem"
            parameterType="plant.dev.warehouse.dto.InventoryItemDto"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO inventory_tbl
        (item_name, item_code, product_type, category, quantity, location,
         delivery_status, in_date, out_date, note, limit_qty)
        VALUES
            (#{name}, #{code}, #{productType}, #{category}, #{quantity}, #{location},
             #{status}, #{inDate}, #{outDate}, #{note}, #{limit})
    </insert>

    <!-- 삭제 -->
    <delete id="deleteItem" parameterType="long">
        DELETE FROM inventory_tbl WHERE item_id = #{id}
    </delete>

    <!-- 위치 기준 READY 수량 합 -->
    <!-- params: loc -->
    <select id="sumReadyQtyAtLocation" parameterType="map" resultType="int">
        SELECT COALESCE(SUM(quantity), 0)
        FROM inventory_tbl
        WHERE location = #{loc}
          AND UPPER(delivery_status) = 'READY'
    </select>

    <!-- 상태 DONE 처리 -->
    <!-- params: id, outDate -->
    <update id="markDone" parameterType="map">
        UPDATE inventory_tbl
        SET delivery_status = 'DONE',
            out_date = #{outDate}
        WHERE item_id = #{id}
    </update>

    <!-- 병합 대상 찾기 (같은 위치, 같은 코드, READY 중 가장 오래된 것 1건) -->
    <!-- params: loc, code -->
    <select id="findReadyRowForMerge" parameterType="map"
            resultType="plant.dev.warehouse.dto.InventoryItemDto">
        SELECT
            item_id          AS id,
            item_name        AS name,
            item_code        AS code,
            quantity,
            location,
            in_date          AS inDate,
            out_date         AS outDate,
            note,
            category,
            product_type     AS productType,
            delivery_status  AS status,
            limit_qty        AS `limit`
        FROM inventory_tbl
        WHERE location = #{loc}
          AND delivery_status = 'READY'
          AND item_code = #{code}
        ORDER BY in_date ASC
            LIMIT 1
    </select>

    <!-- 수량 누적 -->
    <!-- params: id, add -->
    <update id="addQuantity" parameterType="map">
        UPDATE inventory_tbl
        SET quantity = quantity + #{add}
        WHERE item_id = #{id}
    </update>

    <!-- 위치/상품 기준 READY 수량 합 -->
    <!-- params: loc, code -->
    <select id="sumReadyQtyAtLocationForCode" parameterType="map" resultType="int">
        SELECT COALESCE(SUM(quantity), 0)
        FROM inventory_tbl
        WHERE location = #{loc}
          AND delivery_status = 'READY'
          AND item_code = #{code}
    </select>

</mapper>
